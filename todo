#!/usr/bin/env python3
import os
import json
import datetime
import sys
import argparse
from colorama import Fore, Style, init

# initialize colorama
init(autoreset=True)

# priority colors
PRIORITY_COLORS = {
    "high": Fore.RED,
    "medium": Fore.YELLOW,
    "low": Fore.GREEN
}

class TodoList:
    def __init__(self):
        self.tasks = []
        self.filename = "tasks.json"
        self.load_tasks()

    def load_tasks(self):
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r') as f:
                    self.tasks = json.load(f)
            except json.JSONDecodeError:
                print("Error loading tasks file. Starting with empty list")
                self.tasks = []
        else:
            self.tasks = []

    def save_tasks(self):
        with open(self.filename, 'w') as f:
            json.dump(self.tasks, f, indent=2)

    def add_task(self, name, priority="medium"):
        if priority not in PRIORITY_COLORS:
            print(f"Invalid priority. Choose from: {','.join(PRIORITY_COLORS.keys())}")
            return
        
        task = {
            "id": len(self.tasks) + 1,
            "name": name,
            "priority": priority,
            "done": False,
            "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.tasks.append(task)
        self.sort_tasks()
        self.save_tasks()
        print(f"Task added: {name}")

    def delete_task(self, task_id):
        for i, task in enumerate(self.tasks):
            if task["id"] == task_id:
                deleted_task = self.tasks.pop(i)
                self.save_tasks()
                print(f"Deleted task: {deleted_task['name']}")
                return
            print(f"No task found with ID {task_id}")
    
    def update_task(self, task_id, name=None, priority=None):
        for task in self.tasks:
            if task["id"] == task_id:
                if name:
                    task["name"] = name
                if priority:
                    if priority in PRIORITY_COLORS:
                        task["priority"] = priority
                    else:
                        print(f"Invalid priority. Choose from: {','.join(PRIORITY_COLORS.keys())}")
                        return
                print(f"Updated task {task_id}")
                self.sort_tasks()
                self.save_tasks()
                return
        print(f"No task found with ID {task_id}")

    def mark_done(self, task_id):
        for task in self.tasks:
            if task["id"] == task_id:
                task["done"] = not task["done"]
                status = "completed" if task["done"] else "pending"
                print(f"Marked task {task_id} as {status}")
                self.sort_tasks()
                self.save_tasks()
                return
        print(f"No task found with ID {task_id}")
    
    def sort_tasks(self):
        # define priority order
        priority_order = {"high": 0, "medium": 1, "low": 2}

        # sort by done status first, then by priority
        self.tasks.sort(key=lambda x: (x["done"], priority_order.get(x["priority"], 999)))

    def list_tasks(self):
        if not self.tasks:
            print("No tasks found.")
            return
        
        print("\nYour To-Do List:")
        print("=" * 80)
        print(f"{'ID':<5}{'STATUS':<10}{'NAME':<10}{'PRIORITY':<50}")
        print("-" * 80)

        for task in self.tasks:
            status = "✓" if task["done"] else "□"
            color = PRIORITY_COLORS.get(task["priority"], "")
            print(f"{task['id']:<5}{status:<10}{color}{task['name']:<10}{task['priority']:<50}{Style.RESET_ALL}")
            print("=" * 80)
    
    # save file as .md format
    def export_to_markdown(self):
        if not self.tasks:
            print("No tasks to export.")
            return
        
        filename = f"todo_export_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.md"

        with open(filename, 'w') as f:
            f.write("# Todo List\n\n")
            f.write(f"Exported on : {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n\n")

            # write pending tasks
            f.write("## Pending Tasks\n\n")
            for task in self.tasks:
                if not task["done"]:
                    checkbox = "- [ ] "
                    priority_tag = f"[!{task['priority']}] " if task['priority'] in PRIORITY_COLORS else ""
                    f.write(f"{checkbox}{priority_tag}{task['name']}\n")
            
            # write completed tasks
            f.write("\n## Completed Tasks\n\n")
            for task in self.tasks:
                if task["done"]:
                    checkbox = '- [x] '
                    priority_tag = f"[!{task['priority']}] " if task['priority'] in PRIORITY_COLORS else ""
                    f.write(f"{checkbox}{priority_tag}{task['name']}\n")
            
        print(f"Tasks exported to {filename}")
        return filename
    
def display_help():
    # display help if command isn't recognized
    print("Usage: todo [command] [options]")
    print("\nCommands:")
    print("  a, add <task> [options]   Add a new task")    
    print("  ls, list                  List all tasks")
    print("  rm, remove <id>           Remove a task")
    print("  u, update <id> [options]  Update a task")
    print("  m, mark <id>              Mark a task as done/undone")
    print("  e, export                 Export tasks as .md (Obsidian format)")
    print("  s, save                   Save tasks to file")
    print("\nUse 'todo <command> -h for help on specific commands")

def main():
    todo_list = TodoList()

    parser = argparse.ArgumentParser(description="Todo List CLI", add_help=False)
    subparsers = parser.add_subparsers(dest="command", help="Command to run")
    # add command
    add_parser = subparsers.add_parser(
        "add", aliases=["a"],
        help="Add a new task",
        description="Add a new task to your todo list"
    )
    add_parser.add_argument("task", help="Name of the task to add")
    add_parser.add_argument("-p", "--priority", choices=["high", "medium", "low"],
                            default="medium", help="Priority of the task (default: medium)")
    # list command
    list_parser = subparsers.add_parser(
        "list", aliases=["ls"],
        help="List all tasks",
        description="Display all tasks in your todo list"
    )
    # remove command
    remove_parser = subparsers.add_parser(
        "remove", aliases=["rm"],
        help="Remove a task",
        description="Remove a task from your todo list"
    )
    remove_parser.add_argument("task_id", type=int, help="Number of the task to remove")
    # update command
    update_parser = subparsers.add_parser(
        "update", aliases=["u"],
        help="Update a task",
        description="Update the name/priority of a task"
    )
    update_parser.add_argument("task_id", type=int, help="Number of the task to update")
    update_parser.add_argument("-n", "--name", help="New name for the task")
    update_parser.add_argument("-p", "--priority", choices=["high", "medium", "low"],
                               help = "New priority for the task")
    # mark command
    mark_parser = subparsers.add_parser(
        "mark", aliases=["m"],
        help="Mark a task as done/undone",
        description="Toggle the completion status of a task"
    )
    mark_parser.add_argument("task_id", type=int, help="Number of the task to mark")
    # export command
    export_parser = subparsers.add_parser(
        "export", aliases=["e"],
        help="Export tasks as markdown",
        description="Export tasks to a markdown file compatible with Obsidian"
    )
    # save command
    save_parser = subparsers.add_parser(
        "save", aliases=["s"],
        help="Save tasks to file",
        description="Save the current tasks to the JSON file"
    )
    # parse the arguments
    args = parser.parse_args()
    # if no arguments, show help
    if len(sys.argv) == 1:
        display_help()
        sys.exit(0)
    # process commands
    if args.command == "add" or args.command == "a":
        todo_list.add_task(args.task, args.priority)
    elif args.command == "list" or args.command == "ls":
        todo_list.list_tasks()
    elif args.command == "remove" or args.command == "rm":
        todo_list.delete_task(args.task_id)
    elif args.command == "update" or args.command == "u":
        todo_list.update_task(args.task_id, args.name, args.priority)
    elif args.command == "mark" or args.command == "m":
        todo_list.mark_done(args.task_id)
    elif args.command == "save" or args.command == "s":
        todo_list.save_tasks()
        print("Tasks saved to file.")
    else:
        display_help()

if __name__ == "__main__":
    main()
